{"version":3,"sources":["../src/errors.ts","../src/carnil.ts","../src/types/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * Carnil SDK Error Classes\n * Provides structured error handling across all providers\n */\n\nexport class CarnilError extends Error {\n  public readonly code: string;\n  public readonly type: string;\n  public readonly statusCode?: number;\n  public readonly provider?: string;\n  public readonly providerError?: any;\n\n  constructor(\n    message: string,\n    code: string = 'UNKNOWN_ERROR',\n    type: string = 'CARNIL_ERROR',\n    statusCode?: number,\n    provider?: string,\n    providerError?: any\n  ) {\n    super(message);\n    this.name = 'CarnilError';\n    this.code = code;\n    this.type = type;\n    this.statusCode = statusCode;\n    this.provider = provider;\n    this.providerError = providerError;\n\n    // Maintains proper stack trace for where our error was thrown\n    if ((Error as any).captureStackTrace) {\n      (Error as any).captureStackTrace(this, CarnilError);\n    }\n  }\n}\n\nexport class CarnilValidationError extends CarnilError {\n  constructor(message: string, field?: string) {\n    super(\n      field ? `Validation error in field '${field}': ${message}` : message,\n      'VALIDATION_ERROR',\n      'VALIDATION_ERROR',\n      400\n    );\n    this.name = 'CarnilValidationError';\n  }\n}\n\nexport class CarnilAuthenticationError extends CarnilError {\n  constructor(message: string = 'Authentication failed', provider?: string) {\n    super(message, 'AUTHENTICATION_ERROR', 'AUTHENTICATION_ERROR', 401, provider);\n    this.name = 'CarnilAuthenticationError';\n  }\n}\n\nexport class CarnilPermissionError extends CarnilError {\n  constructor(message: string = 'Insufficient permissions', provider?: string) {\n    super(message, 'PERMISSION_ERROR', 'PERMISSION_ERROR', 403, provider);\n    this.name = 'CarnilPermissionError';\n  }\n}\n\nexport class CarnilNotFoundError extends CarnilError {\n  constructor(resource: string, id?: string, provider?: string) {\n    const message = id ? `${resource} with id '${id}' not found` : `${resource} not found`;\n    super(message, 'NOT_FOUND_ERROR', 'NOT_FOUND_ERROR', 404, provider);\n    this.name = 'CarnilNotFoundError';\n  }\n}\n\nexport class CarnilRateLimitError extends CarnilError {\n  public readonly retryAfter?: number;\n\n  constructor(message: string = 'Rate limit exceeded', retryAfter?: number, provider?: string) {\n    super(message, 'RATE_LIMIT_ERROR', 'RATE_LIMIT_ERROR', 429, provider);\n    this.name = 'CarnilRateLimitError';\n    this.retryAfter = retryAfter;\n  }\n}\n\nexport class CarnilServerError extends CarnilError {\n  constructor(message: string = 'Internal server error', provider?: string) {\n    super(message, 'SERVER_ERROR', 'SERVER_ERROR', 500, provider);\n    this.name = 'CarnilServerError';\n  }\n}\n\nexport class CarnilNetworkError extends CarnilError {\n  constructor(message: string = 'Network error', provider?: string) {\n    super(message, 'NETWORK_ERROR', 'NETWORK_ERROR', undefined, provider);\n    this.name = 'CarnilNetworkError';\n  }\n}\n\nexport class CarnilTimeoutError extends CarnilError {\n  constructor(message: string = 'Request timeout', provider?: string) {\n    super(message, 'TIMEOUT_ERROR', 'TIMEOUT_ERROR', undefined, provider);\n    this.name = 'CarnilTimeoutError';\n  }\n}\n\nexport class CarnilWebhookError extends CarnilError {\n  constructor(message: string = 'Webhook verification failed', provider?: string) {\n    super(message, 'WEBHOOK_ERROR', 'WEBHOOK_ERROR', 400, provider);\n    this.name = 'CarnilWebhookError';\n  }\n}\n\nexport class CarnilProviderError extends CarnilError {\n  constructor(\n    message: string,\n    provider: string,\n    providerError?: any,\n    statusCode?: number\n  ) {\n    super(\n      message,\n      'PROVIDER_ERROR',\n      'PROVIDER_ERROR',\n      statusCode,\n      provider,\n      providerError\n    );\n    this.name = 'CarnilProviderError';\n  }\n}\n\n// ============================================================================\n// Error Factory Functions\n// ============================================================================\n\nexport function createProviderError(\n  provider: string,\n  error: any,\n  message?: string\n): CarnilProviderError {\n  const errorMessage = message || error.message || 'Provider error occurred';\n  return new CarnilProviderError(errorMessage, provider, error, error.statusCode);\n}\n\nexport function createValidationError(message: string, field?: string): CarnilValidationError {\n  return new CarnilValidationError(message, field);\n}\n\nexport function createNotFoundError(resource: string, id?: string, provider?: string): CarnilNotFoundError {\n  return new CarnilNotFoundError(resource, id, provider);\n}\n\nexport function createRateLimitError(retryAfter?: number, provider?: string): CarnilRateLimitError {\n  return new CarnilRateLimitError('Rate limit exceeded', retryAfter, provider);\n}\n\n// ============================================================================\n// Error Type Guards\n// ============================================================================\n\nexport function isCarnilError(error: any): error is CarnilError {\n  return error instanceof CarnilError;\n}\n\nexport function isCarnilValidationError(error: any): error is CarnilValidationError {\n  return error instanceof CarnilValidationError;\n}\n\nexport function isCarnilAuthenticationError(error: any): error is CarnilAuthenticationError {\n  return error instanceof CarnilAuthenticationError;\n}\n\nexport function isCarnilPermissionError(error: any): error is CarnilPermissionError {\n  return error instanceof CarnilPermissionError;\n}\n\nexport function isCarnilNotFoundError(error: any): error is CarnilNotFoundError {\n  return error instanceof CarnilNotFoundError;\n}\n\nexport function isCarnilRateLimitError(error: any): error is CarnilRateLimitError {\n  return error instanceof CarnilRateLimitError;\n}\n\nexport function isCarnilServerError(error: any): error is CarnilServerError {\n  return error instanceof CarnilServerError;\n}\n\nexport function isCarnilNetworkError(error: any): error is CarnilNetworkError {\n  return error instanceof CarnilNetworkError;\n}\n\nexport function isCarnilTimeoutError(error: any): error is CarnilTimeoutError {\n  return error instanceof CarnilTimeoutError;\n}\n\nexport function isCarnilWebhookError(error: any): error is CarnilWebhookError {\n  return error instanceof CarnilWebhookError;\n}\n\nexport function isCarnilProviderError(error: any): error is CarnilProviderError {\n  return error instanceof CarnilProviderError;\n}\n\n// ============================================================================\n// Error Handler\n// ============================================================================\n\nexport function handleError(error: any, provider?: string): CarnilError {\n  if (isCarnilError(error)) {\n    return error;\n  }\n\n  // Handle common HTTP status codes\n  if (error.status || error.statusCode) {\n    const status = error.status || error.statusCode;\n    \n    switch (status) {\n      case 400:\n        return new CarnilValidationError(error.message || 'Bad request', provider);\n      case 401:\n        return new CarnilAuthenticationError(error.message || 'Authentication failed', provider);\n      case 403:\n        return new CarnilPermissionError(error.message || 'Insufficient permissions', provider);\n      case 404:\n        return new CarnilNotFoundError('Resource', undefined, provider);\n      case 429:\n        return new CarnilRateLimitError(error.message || 'Rate limit exceeded', error.retryAfter, provider);\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        return new CarnilServerError(error.message || 'Server error', provider);\n      default:\n        return createProviderError(provider || 'unknown', error);\n    }\n  }\n\n  // Handle network errors\n  if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n    return new CarnilNetworkError(error.message || 'Network error', provider);\n  }\n\n  // Handle timeout errors\n  if (error.code === 'ETIMEDOUT' || error.name === 'TimeoutError') {\n    return new CarnilTimeoutError(error.message || 'Request timeout', provider);\n  }\n\n  // Default to provider error\n  return createProviderError(provider || 'unknown', error);\n}\n","import type {\n  Customer,\n  PaymentMethod,\n  PaymentIntent,\n  Subscription,\n  Invoice,\n  Refund,\n  CreateCustomerRequest,\n  UpdateCustomerRequest,\n  CreatePaymentIntentRequest,\n  CreateSubscriptionRequest,\n  CreateInvoiceRequest,\n  CreateRefundRequest,\n  CustomerListRequest,\n  PaymentIntentListRequest,\n  SubscriptionListRequest,\n  InvoiceListRequest,\n  ListResponse,\n  WebhookEvent,\n  UsageMetrics,\n  AIUsageMetrics,\n  CarnilConfig,\n  CarnilResponse,\n} from './types';\n\nimport type { CarnilProvider, ProviderRegistry } from './providers/base';\n\nimport { CarnilError, handleError } from './errors';\n\n// ============================================================================\n// Provider Registry Implementation\n// ============================================================================\n\nclass DefaultProviderRegistry implements ProviderRegistry {\n  private providers = new Map<string, any>();\n\n  register(name: string, factory: any): void {\n    this.providers.set(name, factory);\n  }\n\n  get(name: string): any {\n    return this.providers.get(name);\n  }\n\n  list(): string[] {\n    return Array.from(this.providers.keys());\n  }\n\n  unregister(name: string): boolean {\n    return this.providers.delete(name);\n  }\n\n  create(name: string, config: any): CarnilProvider {\n    const factory = this.providers.get(name);\n    if (!factory) {\n      throw new CarnilError(`Provider '${name}' not found`, 'PROVIDER_NOT_FOUND');\n    }\n\n    // Support both factory objects with a create method and direct class constructors\n    if (typeof factory === 'function') {\n      // It's a class constructor\n      return new factory(config);\n    } else if (factory && typeof factory.create === 'function') {\n      // It's a factory object with a create method\n      return factory.create(config);\n    } else {\n      throw new CarnilError(\n        `Invalid provider factory for '${name}'. Expected a class constructor or an object with a create method.`,\n        'INVALID_PROVIDER_FACTORY'\n      );\n    }\n  }\n}\n\n// ============================================================================\n// Main Carnil Class\n// ============================================================================\n\nexport class Carnil {\n  private provider: CarnilProvider;\n  private config: CarnilConfig;\n  private static registry: ProviderRegistry = new DefaultProviderRegistry();\n\n  constructor(config: CarnilConfig) {\n    this.config = config;\n    this.provider = Carnil.registry.create(config.provider.provider, config.provider);\n  }\n\n  // ========================================================================\n  // Static Methods\n  // ========================================================================\n\n  static registerProvider(name: string, factory: any): void {\n    Carnil.registry.register(name, factory);\n  }\n\n  static getRegisteredProviders(): string[] {\n    return Carnil.registry.list();\n  }\n\n  static createProvider(name: string, config: any): CarnilProvider {\n    return Carnil.registry.create(name, config);\n  }\n\n  // ========================================================================\n  // Provider Access\n  // ========================================================================\n\n  getProvider(): CarnilProvider {\n    return this.provider;\n  }\n\n  getConfig(): CarnilConfig {\n    return this.config;\n  }\n\n  // ========================================================================\n  // Health Check\n  // ========================================================================\n\n  async healthCheck(): Promise<boolean> {\n    try {\n      return await this.provider.healthCheck();\n    } catch (error) {\n      if (this.config.debug) {\n        // Log error (in production, use proper logging)\n        if (typeof console !== 'undefined') {\n          console.error('Health check failed:', error);\n        }\n      }\n      return false;\n    }\n  }\n\n  // ========================================================================\n  // Customer Operations\n  // ========================================================================\n\n  async createCustomer(request: CreateCustomerRequest): Promise<CarnilResponse<Customer>> {\n    try {\n      const customer = await this.provider.createCustomer(request);\n      return { data: customer, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async getCustomer(id: string): Promise<CarnilResponse<Customer>> {\n    try {\n      const customer = await this.provider.retrieveCustomer({ id });\n      return { data: customer, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async updateCustomer(\n    id: string,\n    request: UpdateCustomerRequest\n  ): Promise<CarnilResponse<Customer>> {\n    try {\n      const customer = await this.provider.updateCustomer(id, request);\n      return { data: customer, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async deleteCustomer(id: string): Promise<CarnilResponse<void>> {\n    try {\n      await this.provider.deleteCustomer(id);\n      return { data: undefined, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: undefined, success: false, error: carnilError.message };\n    }\n  }\n\n  async listCustomers(\n    request?: CustomerListRequest\n  ): Promise<CarnilResponse<ListResponse<Customer>>> {\n    try {\n      const customers = await this.provider.listCustomers(request);\n      // Ensure the response is wrapped in ListResponse format\n      const listResponse: ListResponse<Customer> = Array.isArray(customers)\n        ? { data: customers, hasMore: false }\n        : customers;\n      return { data: listResponse, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  // ========================================================================\n  // Payment Method Operations\n  // ========================================================================\n\n  async listPaymentMethods(customerId: string): Promise<CarnilResponse<PaymentMethod[]>> {\n    try {\n      const paymentMethods = await this.provider.listPaymentMethods({ customerId });\n      return { data: paymentMethods, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: [], success: false, error: carnilError.message };\n    }\n  }\n\n  async attachPaymentMethod(\n    customerId: string,\n    paymentMethodId: string\n  ): Promise<CarnilResponse<PaymentMethod>> {\n    try {\n      const paymentMethod = await this.provider.attachPaymentMethod(customerId, paymentMethodId);\n      return { data: paymentMethod, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async detachPaymentMethod(paymentMethodId: string): Promise<CarnilResponse<void>> {\n    try {\n      await this.provider.detachPaymentMethod(paymentMethodId);\n      return { data: undefined, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: undefined, success: false, error: carnilError.message };\n    }\n  }\n\n  async setDefaultPaymentMethod(\n    customerId: string,\n    paymentMethodId: string\n  ): Promise<CarnilResponse<PaymentMethod>> {\n    try {\n      const paymentMethod = await this.provider.setDefaultPaymentMethod(\n        customerId,\n        paymentMethodId\n      );\n      return { data: paymentMethod, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  // ========================================================================\n  // Payment Intent Operations\n  // ========================================================================\n\n  async createPaymentIntent(\n    request: CreatePaymentIntentRequest\n  ): Promise<CarnilResponse<PaymentIntent>> {\n    try {\n      const paymentIntent = await this.provider.createPaymentIntent(request);\n      return { data: paymentIntent, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async getPaymentIntent(id: string): Promise<CarnilResponse<PaymentIntent>> {\n    try {\n      const paymentIntent = await this.provider.getPaymentIntent(id);\n      return { data: paymentIntent, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async updatePaymentIntent(\n    id: string,\n    updates: Partial<CreatePaymentIntentRequest>\n  ): Promise<CarnilResponse<PaymentIntent>> {\n    try {\n      const paymentIntent = await this.provider.updatePaymentIntent(id, updates);\n      return { data: paymentIntent, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async cancelPaymentIntent(id: string): Promise<CarnilResponse<PaymentIntent>> {\n    try {\n      const paymentIntent = await this.provider.cancelPaymentIntent(id);\n      return { data: paymentIntent, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async confirmPaymentIntent(\n    id: string,\n    paymentMethodId?: string\n  ): Promise<CarnilResponse<PaymentIntent>> {\n    try {\n      const paymentIntent = await this.provider.confirmPaymentIntent(id, paymentMethodId);\n      return { data: paymentIntent, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async capturePaymentIntent(id: string, amount?: number): Promise<CarnilResponse<PaymentIntent>> {\n    try {\n      const paymentIntent = await this.provider.capturePaymentIntent(id, amount);\n      return { data: paymentIntent, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async listPaymentIntents(\n    request?: PaymentIntentListRequest\n  ): Promise<CarnilResponse<ListResponse<PaymentIntent>>> {\n    try {\n      const paymentIntents = await this.provider.listPaymentIntents(request);\n      // Ensure the response is wrapped in ListResponse format\n      const listResponse: ListResponse<PaymentIntent> = Array.isArray(paymentIntents)\n        ? { data: paymentIntents, hasMore: false }\n        : paymentIntents;\n      return { data: listResponse, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  // ========================================================================\n  // Subscription Operations\n  // ========================================================================\n\n  async createSubscription(\n    request: CreateSubscriptionRequest\n  ): Promise<CarnilResponse<Subscription>> {\n    try {\n      const subscription = await this.provider.createSubscription(request);\n      return { data: subscription, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async getSubscription(id: string): Promise<CarnilResponse<Subscription>> {\n    try {\n      const subscription = await this.provider.getSubscription(id);\n      return { data: subscription, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async updateSubscription(\n    id: string,\n    updates: Partial<CreateSubscriptionRequest>\n  ): Promise<CarnilResponse<Subscription>> {\n    try {\n      const subscription = await this.provider.updateSubscription(id, updates);\n      return { data: subscription, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async cancelSubscription(id: string): Promise<CarnilResponse<Subscription>> {\n    try {\n      const subscription = await this.provider.cancelSubscription(id);\n      return { data: subscription, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async listSubscriptions(\n    request?: SubscriptionListRequest\n  ): Promise<CarnilResponse<ListResponse<Subscription>>> {\n    try {\n      const subscriptions = await this.provider.listSubscriptions(request);\n      // Ensure the response is wrapped in ListResponse format\n      const listResponse: ListResponse<Subscription> = Array.isArray(subscriptions)\n        ? { data: subscriptions, hasMore: false }\n        : subscriptions;\n      return { data: listResponse, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  // ========================================================================\n  // Invoice Operations\n  // ========================================================================\n\n  async createInvoice(request: CreateInvoiceRequest): Promise<CarnilResponse<Invoice>> {\n    try {\n      const invoice = await this.provider.createInvoice(request);\n      return { data: invoice, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async getInvoice(id: string): Promise<CarnilResponse<Invoice>> {\n    try {\n      const invoice = await this.provider.getInvoice(id);\n      return { data: invoice, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async updateInvoice(\n    id: string,\n    updates: Partial<CreateInvoiceRequest>\n  ): Promise<CarnilResponse<Invoice>> {\n    try {\n      const invoice = await this.provider.updateInvoice(id, updates);\n      return { data: invoice, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async finalizeInvoice(id: string): Promise<CarnilResponse<Invoice>> {\n    try {\n      const invoice = await this.provider.finalizeInvoice(id);\n      return { data: invoice, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async payInvoice(id: string, paymentMethodId?: string): Promise<CarnilResponse<Invoice>> {\n    try {\n      const invoice = await this.provider.payInvoice(id, paymentMethodId);\n      return { data: invoice, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async listInvoices(request?: InvoiceListRequest): Promise<CarnilResponse<ListResponse<Invoice>>> {\n    try {\n      const invoices = await this.provider.listInvoices(request);\n      // Ensure the response is wrapped in ListResponse format\n      const listResponse: ListResponse<Invoice> = Array.isArray(invoices)\n        ? { data: invoices, hasMore: false }\n        : invoices;\n      return { data: listResponse, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  // ========================================================================\n  // Refund Operations\n  // ========================================================================\n\n  async createRefund(request: CreateRefundRequest): Promise<CarnilResponse<Refund>> {\n    try {\n      const refund = await this.provider.createRefund(request);\n      return { data: refund, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async getRefund(id: string): Promise<CarnilResponse<Refund>> {\n    try {\n      const refund = await this.provider.getRefund(id);\n      return { data: refund, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: null as any, success: false, error: carnilError.message };\n    }\n  }\n\n  async listRefunds(paymentId?: string): Promise<CarnilResponse<Refund[]>> {\n    try {\n      const refunds = await this.provider.listRefunds({ paymentId });\n      return { data: refunds, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: [], success: false, error: carnilError.message };\n    }\n  }\n\n  // ========================================================================\n  // Webhook Operations\n  // ========================================================================\n\n  async verifyWebhook(payload: string, signature: string, secret: string): Promise<boolean> {\n    try {\n      return await this.provider.verifyWebhook(payload, signature, secret);\n    } catch (error) {\n      if (this.config.debug) {\n        // Log error (in production, use proper logging)\n        if (typeof console !== 'undefined') {\n          console.error('Webhook verification failed:', error);\n        }\n      }\n      return false;\n    }\n  }\n\n  async parseWebhook(payload: string, signature: string, secret: string): Promise<WebhookEvent> {\n    try {\n      return await this.provider.parseWebhook(payload, signature, secret);\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      throw carnilError;\n    }\n  }\n\n  // ========================================================================\n  // Analytics Operations\n  // ========================================================================\n\n  async trackUsage(metrics: UsageMetrics): Promise<CarnilResponse<void>> {\n    try {\n      await this.provider.trackUsage(metrics);\n      return { data: undefined, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: undefined, success: false, error: carnilError.message };\n    }\n  }\n\n  async trackAIUsage(metrics: AIUsageMetrics): Promise<CarnilResponse<void>> {\n    try {\n      await this.provider.trackAIUsage(metrics);\n      return { data: undefined, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: undefined, success: false, error: carnilError.message };\n    }\n  }\n\n  async getUsageMetrics(\n    customerId: string,\n    featureId: string,\n    period: string\n  ): Promise<CarnilResponse<UsageMetrics[]>> {\n    try {\n      const metrics = await this.provider.getUsageMetrics(customerId, featureId, period);\n      return { data: metrics, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: [], success: false, error: carnilError.message };\n    }\n  }\n\n  async getAIUsageMetrics(\n    customerId: string,\n    modelId?: string,\n    period?: string\n  ): Promise<CarnilResponse<AIUsageMetrics[]>> {\n    try {\n      const metrics = await this.provider.getAIUsageMetrics(customerId, modelId, period);\n      return { data: metrics, success: true };\n    } catch (error) {\n      const carnilError = handleError(error, this.provider.name);\n      return { data: [], success: false, error: carnilError.message };\n    }\n  }\n}\n","import { z } from 'zod';\n\n// ============================================================================\n// Core Entity Types\n// ============================================================================\n\nexport const CustomerSchema = z.object({\n  id: z.string(),\n  email: z.string().email().optional(),\n  name: z.string().optional(),\n  phone: z.string().optional(),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n  created: z.date(),\n  updated: z.date(),\n  deleted: z.boolean().optional(),\n  // Provider-specific fields\n  provider: z.string(),\n  providerId: z.string(),\n});\n\nexport const PaymentMethodSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  type: z.enum(['card', 'bank_account', 'upi', 'wallet', 'netbanking', 'emi']),\n  brand: z.string().optional(), // visa, mastercard, etc.\n  last4: z.string().optional(),\n  expiryMonth: z.number().optional(),\n  expiryYear: z.number().optional(),\n  isDefault: z.boolean().default(false),\n  metadata: z.record(z.string()).optional(),\n  created: z.date(),\n  updated: z.date(),\n  provider: z.string(),\n  providerId: z.string(),\n});\n\nexport const PaymentIntentSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  amount: z.number(),\n  currency: z.string(),\n  status: z.enum([\n    'requires_payment_method',\n    'requires_confirmation',\n    'requires_action',\n    'processing',\n    'requires_capture',\n    'canceled',\n    'succeeded',\n    'failed',\n  ]),\n  clientSecret: z.string().optional(),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n  paymentMethodId: z.string().optional(),\n  receiptEmail: z.string().optional(),\n  created: z.date(),\n  updated: z.date(),\n  provider: z.string(),\n  providerId: z.string(),\n});\n\nexport const SubscriptionSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  status: z.enum([\n    'incomplete',\n    'incomplete_expired',\n    'trialing',\n    'active',\n    'past_due',\n    'canceled',\n    'unpaid',\n    'paused',\n  ]),\n  currentPeriodStart: z.date(),\n  currentPeriodEnd: z.date(),\n  cancelAtPeriodEnd: z.boolean().default(false),\n  canceledAt: z.date().optional(),\n  trialStart: z.date().optional(),\n  trialEnd: z.date().optional(),\n  metadata: z.record(z.string()).optional(),\n  created: z.date(),\n  updated: z.date(),\n  provider: z.string(),\n  providerId: z.string(),\n});\n\nexport const InvoiceSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  subscriptionId: z.string().optional(),\n  status: z.enum(['draft', 'open', 'paid', 'void', 'uncollectible']),\n  amount: z.number(),\n  currency: z.string(),\n  amountPaid: z.number().default(0),\n  amountDue: z.number(),\n  subtotal: z.number(),\n  tax: z.number().default(0),\n  total: z.number(),\n  description: z.string().optional(),\n  hostedInvoiceUrl: z.string().optional(),\n  invoicePdf: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n  created: z.date(),\n  updated: z.date(),\n  dueDate: z.date().optional(),\n  paidAt: z.date().optional(),\n  provider: z.string(),\n  providerId: z.string(),\n});\n\nexport const RefundSchema = z.object({\n  id: z.string(),\n  paymentId: z.string(),\n  amount: z.number(),\n  currency: z.string(),\n  status: z.enum(['pending', 'succeeded', 'failed', 'canceled']),\n  reason: z.enum(['duplicate', 'fraudulent', 'requested_by_customer']).optional(),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n  created: z.date(),\n  updated: z.date(),\n  provider: z.string(),\n  providerId: z.string(),\n});\n\nexport const DisputeSchema = z.object({\n  id: z.string(),\n  paymentId: z.string(),\n  amount: z.number(),\n  currency: z.string(),\n  status: z.enum([\n    'warning_needs_response',\n    'warning_under_review',\n    'warning_closed',\n    'needs_response',\n    'under_review',\n    'charge_refunded',\n    'won',\n    'lost',\n  ]),\n  reason: z.enum([\n    'credit_not_processed',\n    'duplicate',\n    'fraudulent',\n    'general',\n    'incorrect_account_details',\n    'insufficient_funds',\n    'product_not_received',\n    'product_unacceptable',\n    'subscription_canceled',\n    'unrecognized',\n  ]),\n  evidence: z.record(z.any()).optional(),\n  metadata: z.record(z.string()).optional(),\n  created: z.date(),\n  updated: z.date(),\n  provider: z.string(),\n  providerId: z.string(),\n});\n\n// ============================================================================\n// Request/Response Types\n// ============================================================================\n\nexport const CreateCustomerRequestSchema = z.object({\n  email: z.string().email().optional(),\n  name: z.string().optional(),\n  phone: z.string().optional(),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n});\n\nexport const UpdateCustomerRequestSchema = z.object({\n  email: z.string().email().optional(),\n  name: z.string().optional(),\n  phone: z.string().optional(),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n});\n\nexport const CreatePaymentIntentRequestSchema = z.object({\n  customerId: z.string(),\n  amount: z.number().positive(),\n  currency: z.string().length(3),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n  paymentMethodId: z.string().optional(),\n  receiptEmail: z.string().email().optional(),\n  captureMethod: z.enum(['automatic', 'manual']).default('automatic'),\n});\n\nexport const CreateSubscriptionRequestSchema = z.object({\n  customerId: z.string(),\n  priceId: z.string(),\n  trialPeriodDays: z.number().optional(),\n  metadata: z.record(z.string()).optional(),\n  paymentMethodId: z.string().optional(),\n});\n\nexport const CreateInvoiceRequestSchema = z.object({\n  customerId: z.string(),\n  subscriptionId: z.string().optional(),\n  amount: z.number().positive(),\n  currency: z.string().length(3),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n  dueDate: z.date().optional(),\n});\n\nexport const CreateRefundRequestSchema = z.object({\n  paymentId: z.string(),\n  amount: z.number().positive().optional(),\n  reason: z.enum(['duplicate', 'fraudulent', 'requested_by_customer']).optional(),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n});\n\n// ============================================================================\n// List/Query Types\n// ============================================================================\n\nexport const ListRequestSchema = z.object({\n  limit: z.number().min(1).max(100).default(10),\n  startingAfter: z.string().optional(),\n  endingBefore: z.string().optional(),\n  created: z\n    .object({\n      gte: z.date().optional(),\n      lte: z.date().optional(),\n    })\n    .optional(),\n});\n\nexport const CustomerListRequestSchema = ListRequestSchema.extend({\n  email: z.string().optional(),\n});\n\nexport const PaymentIntentListRequestSchema = ListRequestSchema.extend({\n  customerId: z.string().optional(),\n  status: z.string().optional(),\n});\n\nexport const SubscriptionListRequestSchema = ListRequestSchema.extend({\n  customerId: z.string().optional(),\n  status: z.string().optional(),\n});\n\nexport const InvoiceListRequestSchema = ListRequestSchema.extend({\n  customerId: z.string().optional(),\n  subscriptionId: z.string().optional(),\n  status: z.string().optional(),\n});\n\n// ============================================================================\n// Webhook Types\n// ============================================================================\n\nexport const WebhookEventSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  data: z.record(z.any()),\n  created: z.date(),\n  provider: z.string(),\n  livemode: z.boolean(),\n});\n\n// ============================================================================\n// Analytics & Usage Types\n// ============================================================================\n\nexport const UsageMetricsSchema = z.object({\n  customerId: z.string(),\n  featureId: z.string(),\n  usage: z.number(),\n  limit: z.number().optional(),\n  period: z.enum(['day', 'week', 'month', 'year']),\n  startDate: z.date(),\n  endDate: z.date(),\n  metadata: z.record(z.string()).optional(),\n});\n\nexport const AIUsageMetricsSchema = z.object({\n  customerId: z.string(),\n  modelId: z.string(),\n  tokens: z.number(),\n  inputTokens: z.number(),\n  outputTokens: z.number(),\n  cost: z.number(),\n  timestamp: z.date(),\n  metadata: z.record(z.string()).optional(),\n});\n\n// ============================================================================\n// Type Exports\n// ============================================================================\n\nexport type Customer = z.infer<typeof CustomerSchema>;\nexport type PaymentMethod = z.infer<typeof PaymentMethodSchema>;\nexport type PaymentIntent = z.infer<typeof PaymentIntentSchema>;\nexport type Subscription = z.infer<typeof SubscriptionSchema>;\nexport type Invoice = z.infer<typeof InvoiceSchema>;\nexport type Refund = z.infer<typeof RefundSchema>;\nexport type Dispute = z.infer<typeof DisputeSchema>;\n\nexport type CreateCustomerRequest = z.infer<typeof CreateCustomerRequestSchema>;\nexport type UpdateCustomerRequest = z.infer<typeof UpdateCustomerRequestSchema>;\nexport type CreatePaymentIntentRequest = z.infer<typeof CreatePaymentIntentRequestSchema>;\nexport type CreateSubscriptionRequest = z.infer<typeof CreateSubscriptionRequestSchema>;\nexport type CreateInvoiceRequest = z.infer<typeof CreateInvoiceRequestSchema>;\nexport type CreateRefundRequest = z.infer<typeof CreateRefundRequestSchema>;\n\n// ============================================================================\n// Parameter Types for Provider Interfaces\n// ============================================================================\n\n// Customer parameter types\nexport type CreateCustomerParams = CreateCustomerRequest;\nexport type UpdateCustomerParams = UpdateCustomerRequest;\nexport type RetrieveCustomerParams = { id: string };\nexport type ListCustomersParams = CustomerListRequest;\n\n// Payment Method parameter types\nexport type CreatePaymentMethodParams = {\n  customerId: string;\n  type: 'card' | 'bank_account' | 'upi' | 'wallet' | 'netbanking' | 'emi';\n  token?: string;\n  metadata?: Record<string, any>;\n};\nexport type UpdatePaymentMethodParams = {\n  metadata?: Record<string, any>;\n};\nexport type RetrievePaymentMethodParams = { id: string };\nexport type ListPaymentMethodsParams = { customerId: string };\n\n// Product parameter types\nexport type Product = {\n  id: string;\n  name: string;\n  description?: string;\n  metadata?: Record<string, any>;\n  created: Date;\n  updated: Date;\n  provider: string;\n  providerId: string;\n};\nexport type CreateProductParams = {\n  name: string;\n  description?: string;\n  metadata?: Record<string, any>;\n};\nexport type UpdateProductParams = {\n  name?: string;\n  description?: string;\n  metadata?: Record<string, any>;\n};\nexport type RetrieveProductParams = { id: string };\nexport type ListProductsParams = { limit?: number; startingAfter?: string };\n\n// Price parameter types\nexport type Price = {\n  id: string;\n  productId: string;\n  amount: number;\n  currency: string;\n  interval?: 'day' | 'week' | 'month' | 'year';\n  intervalCount?: number;\n  metadata?: Record<string, any>;\n  created: Date;\n  updated: Date;\n  provider: string;\n  providerId: string;\n};\nexport type CreatePriceParams = {\n  productId: string;\n  amount: number;\n  currency: string;\n  interval?: 'day' | 'week' | 'month' | 'year';\n  intervalCount?: number;\n  metadata?: Record<string, any>;\n};\nexport type UpdatePriceParams = {\n  metadata?: Record<string, any>;\n};\nexport type RetrievePriceParams = { id: string };\nexport type ListPricesParams = { productId?: string; limit?: number; startingAfter?: string };\n\n// Subscription parameter types\nexport type CreateSubscriptionParams = CreateSubscriptionRequest;\nexport type UpdateSubscriptionParams = Partial<CreateSubscriptionRequest>;\nexport type RetrieveSubscriptionParams = { id: string };\nexport type ListSubscriptionsParams = SubscriptionListRequest;\n\n// Invoice parameter types\nexport type CreateInvoiceParams = CreateInvoiceRequest;\nexport type UpdateInvoiceParams = Partial<CreateInvoiceRequest>;\nexport type RetrieveInvoiceParams = { id: string };\nexport type ListInvoicesParams = InvoiceListRequest;\n\n// Refund parameter types\nexport type CreateRefundParams = CreateRefundRequest;\nexport type RetrieveRefundParams = { id: string };\nexport type ListRefundsParams = { paymentId?: string; limit?: number; startingAfter?: string };\n\n// Dispute parameter types\nexport type RetrieveDisputeParams = { id: string };\nexport type ListDisputesParams = { limit?: number; startingAfter?: string };\n\n// Payment Intent parameter types\nexport type CreatePaymentIntentParams = CreatePaymentIntentRequest;\nexport type UpdatePaymentIntentParams = Partial<CreatePaymentIntentRequest>;\nexport type RetrievePaymentIntentParams = { id: string };\nexport type ListPaymentIntentsParams = PaymentIntentListRequest;\n\nexport type ListRequest = z.infer<typeof ListRequestSchema>;\nexport type CustomerListRequest = z.infer<typeof CustomerListRequestSchema>;\nexport type PaymentIntentListRequest = z.infer<typeof PaymentIntentListRequestSchema>;\nexport type SubscriptionListRequest = z.infer<typeof SubscriptionListRequestSchema>;\nexport type InvoiceListRequest = z.infer<typeof InvoiceListRequestSchema>;\n\nexport type WebhookEvent = z.infer<typeof WebhookEventSchema>;\nexport type UsageMetrics = z.infer<typeof UsageMetricsSchema>;\nexport type AIUsageMetrics = z.infer<typeof AIUsageMetricsSchema>;\n\n// ============================================================================\n// Provider Configuration Types\n// ============================================================================\n\nexport interface ProviderConfig {\n  provider: string;\n  apiKey: string;\n  webhookSecret?: string;\n  baseUrl?: string;\n  timeout?: number;\n  retries?: number;\n}\n\nexport interface CarnilConfig {\n  provider: ProviderConfig;\n  debug?: boolean;\n  logLevel?: 'error' | 'warn' | 'info' | 'debug';\n  userAgent?: string;\n}\n\n// ============================================================================\n// Response Types\n// ============================================================================\n\nexport interface ListResponse<T> {\n  data: T[];\n  hasMore: boolean;\n  totalCount?: number;\n  nextCursor?: string;\n  prevCursor?: string;\n}\n\nexport interface CarnilResponse<T> {\n  data: T;\n  success: boolean;\n  error?: string;\n  metadata?: Record<string, any>;\n}\n"]}